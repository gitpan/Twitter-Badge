.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Twitter::Badge 3"
.TH Twitter::Badge 3 "2008-05-05" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
Twitter::Badge \- Perl module that displays the current Twitter information of a user
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Twitter::Badge;
.Ve
.PP
.Vb 4
\&  # If you know the Twitter ID
\&  my $id = 14512139;                            # define the Twitter ID
\&  my $twitter = Twitter::Badge->new(id => $id); # create the object for that ID
\&  $twitter->fetch();                            # get information for this ID
.Ve
.PP
.Vb 4
\&  # Display status
\&  print $twitter->name.' says - '.$twitter->text."\en"; # display status
\&  print $twitter->name.' has '.$twitter->followers_count." followers\en"; # display followers
\&  # .. and so on
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Twitter::Badge is a class that retrieves the Twitter information for the user's \s-1ID\s0 or screen name.
.SH "METHODS"
.IX Header "METHODS"
.Sh "new(%args)"
.IX Subsection "new(%args)"
The method \f(CW\*(C`new(%args)\*(C'\fR creates and returns a new \f(CW\*(C`Twitter::Badge\*(C'\fR object.
It takes either zero parameters or a hash containing at least one of the following:
.PP
.Vb 5
\&    KEY                  DEFAULT VALUE
\&    ===========          =============
\&    id                   undef
\&    screen_name          undef
\&    ua                   Mozilla/4.0
.Ve
.PP
\fISummary of parameters\fR
.IX Subsection "Summary of parameters"
.IP "* id" 4
.IX Item "id"
[\s-1OPTIONAL\s0] This parameter is the Twitter \s-1ID\s0, a number that is associated with the Twitter screen name.
.IP "* screen_name" 4
.IX Item "screen_name"
[\s-1OPTIONAL\s0] This parameter is the Twitter screen name.
.IP "* ua" 4
.IX Item "ua"
[\s-1OPTIONAL\s0] This parameter is the User-Agent string that is included in the request to Twitter.
You can find a list of user-agent strings at <http://aruljohn.com/ua/>
.Sh "\fIfetch()\fP"
.IX Subsection "fetch()"
The method \f(CW\*(C`fetch()\*(C'\fR fetches the following information from the user's corresponding Twitter account:
.IP "* id" 4
.IX Item "id"
.PD 0
.IP "* name" 4
.IX Item "name"
.IP "* text" 4
.IX Item "text"
.IP "* profile_image_url" 4
.IX Item "profile_image_url"
.IP "* followers_count" 4
.IX Item "followers_count"
.IP "* created_at" 4
.IX Item "created_at"
.PD
.Sh "\fIscreen_name()\fP"
.IX Subsection "screen_name()"
The method \f(CW\*(C`screen_name()\*(C'\fR returns the screen_name value. If a parameter is passed into it, screen_name is set to that value.
.PP
This print the current Twitter screen name.
  print \f(CW$twitter\fR\->screen_name
.PP
This will set the current Twitter screen name to 'aruljohn'.
  \f(CW$twitter\fR\->screen_name('aruljohn');
.Sh "\fIua()\fP"
.IX Subsection "ua()"
The method \f(CW\*(C`ua()\*(C'\fR returns the User-Agent string value. If a parameter is passed into it, ua is set to that value.
You can find a list of User-Agent strings at <http://aruljohn.com/ua/>
.Sh "\fIname()\fP"
.IX Subsection "name()"
The method \f(CW\*(C`name()\*(C'\fR returns the \f(CW\*(C`name\*(C'\fR value retrieved from the account specified by the Twitter \s-1ID\s0.
.Sh "\fItext()\fP"
.IX Subsection "text()"
The method \f(CW\*(C`text()\*(C'\fR returns the \f(CW\*(C`text\*(C'\fR value retrieved from the account specified by the Twitter \s-1ID\s0.
.Sh "\fIprofile_image_url()\fP"
.IX Subsection "profile_image_url()"
The method \f(CW\*(C`profile_image_url()\*(C'\fR returns the \f(CW\*(C`profile_image_url\*(C'\fR value retrieved from the account specified by the Twitter \s-1ID\s0
.Sh "\fIfollowers_count()\fP"
.IX Subsection "followers_count()"
The method \f(CW\*(C`followers_count()\*(C'\fR returns the \f(CW\*(C`followers_count\*(C'\fR value retrieved from the account specified by the Twitter \s-1ID\s0.
.Sh "\fIcreated_at()\fP"
.IX Subsection "created_at()"
The method \f(CW\*(C`created_at()\*(C'\fR returns the \f(CW\*(C`created_at\*(C'\fR value \- the time the user updated his/her Twitter status.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
\fICreating badge with no parameters\fR
.IX Subsection "Creating badge with no parameters"
.PP
.Vb 1
\&  use Twitter::Badge;
.Ve
.PP
.Vb 1
\&  my $twitter = Twitter::Badge->new(); # create an empty Twitter::Badge object
.Ve
.PP
.Vb 5
\&  # Setting Twitter ID
\&  $twitter->id(14512139);              # setting ID to 14512139
\&  $twitter->fetch();                   # fetch Twitter info [with that Twitter ID]
\&  print $twitter->name.' says: '.$twitter->text."\en";
\&  print $twitter->name.' posted on '.$twitter->created_at."\en";
.Ve
.PP
\fICreating badge with screen name as parameter\fR
.IX Subsection "Creating badge with screen name as parameter"
.PP
.Vb 1
\&  use Twitter::Badge;
.Ve
.PP
.Vb 5
\&  # Create object with screen name
\&  $twitter = Twitter::Badge->new(screen_name => 'Guz_'); # create the object
\&  $twitter->fetch();
\&  print $twitter->name.' says: '.$twitter->text."\en";
\&  print $twitter->name.' posted on '.$twitter->created_at."\en";
.Ve
.PP
\fICreating badge with User-Agent as parameter\fR
.IX Subsection "Creating badge with User-Agent as parameter"
.PP
.Vb 1
\&  use Twitter::Badge;
.Ve
.PP
.Vb 6
\&  # Create object with User-Agent
\&  $twitter = Twitter::Badge->new(ua => 'Mozilla/6.0 (Twitterbot)'); # create the object
\&  $twitter->id(14512139);
\&  $twitter->fetch();
\&  print $twitter->name.' says: '.$twitter->text."\en";
\&  print $twitter->name.' posted on '.$twitter->created_at."\en\en";
.Ve
.PP
.Vb 5
\&  # Change screen name
\&  $twitter->screen_name('justjul');
\&  $twitter->fetch();
\&  print $twitter->name.' says: '.$twitter->text."\en";
\&  print $twitter->name.' has '.$twitter->followers_count." followers\en\en";
.Ve
.PP
You can use the Data::Dumper module to check the contents of \f(CW$twitter\fR at any time.
.PP
.Vb 1
\&  use Data::Dumper;
.Ve
.PP
.Vb 1
\&  # other code comes here
.Ve
.PP
.Vb 1
\&  print Dumper($twitter);
.Ve
.SH "BUGS"
.IX Header "BUGS"
There are no known bugs as of now.
.PP
But since the Twitter::Badge module is built on the \s-1XML\s0 file that Twitter generates \- and this is bound to change over a period of time \- some methods may stop working. When that happens, I will update this module. I will also update the module if Twitter includes more useful content in its \s-1XML\s0 file, and on user requests. My email address for contact is <arul@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Twitter \s-1API\s0 Documentation \- <http://groups.google.com/group/twitter\-development\-talk/web/api\-documentation>
.SH "AUTHOR"
.IX Header "AUTHOR"
Arul John \- <http://aruljohn.com>
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
Copyright (C) 2008 by Arul John
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.6.0 or,
at your option, any later version of Perl you may have available.
